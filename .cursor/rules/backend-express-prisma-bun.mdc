# Backend Express.js, Prisma, Bun & PostgreSQL Style Guide

Expert-level backend development guide for Express.js, Prisma ORM, Bun runtime, PostgreSQL database, with TypeScript, modern patterns, and production-ready practices.

## Core Technologies Stack
- **Runtime**: Bun (ultra-fast JavaScript runtime)
- **Framework**: Express.js with TypeScript
- **Database**: PostgreSQL with Prisma ORM
- **Validation**: Zod schemas
- **Testing**: Vitest + Supertest
- **Authentication**: JWT + bcrypt

## Bun Best Practices

### Project Setup
```bash
# Initialize with Bun
bun init
bun add express cors helmet compression morgan
bun add -d @types/express @types/cors @types/compression @types/morgan
bun add prisma @prisma/client zod bcryptjs jsonwebtoken
bun add -d @types/bcryptjs @types/jsonwebtoken
```

### Bun-Specific Optimizations
```typescript
// Use Bun's built-in features
import { file, write } from 'bun'

// Fast file operations
const configFile = file('./config.json')
const config = await configFile.json()

// Efficient string manipulation
const hash = Bun.hash('password')

// Fast HTTP requests
const response = await fetch('https://api.example.com')
```

### Environment Configuration
```typescript
// src/config/env.ts
import { z } from 'zod'

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
  PORT: z.string().transform(Number).default('3000'),
  DATABASE_URL: z.string().url(),
  JWT_SECRET: z.string().min(32),
  JWT_EXPIRES_IN: z.string().default('7d'),
  BCRYPT_ROUNDS: z.string().transform(Number).default('12'),
  CORS_ORIGIN: z.string().default('*'),
  RATE_LIMIT_WINDOW: z.string().transform(Number).default('900000'), // 15 minutes
  RATE_LIMIT_MAX: z.string().transform(Number).default('100'),
})

export const env = envSchema.parse(process.env)
```

## Express.js Architecture

### Application Structure
```typescript
// src/app.ts
import express from 'express'
import cors from 'cors'
import helmet from 'helmet'
import compression from 'compression'
import morgan from 'morgan'
import { errorHandler } from './middleware/error-handler'
import { notFoundHandler } from './middleware/not-found'
import { rateLimiter } from './middleware/rate-limiter'
import routes from './routes'

const app = express()

// Security middleware
app.use(helmet())
app.use(cors({
  origin: env.CORS_ORIGIN,
  credentials: true
}))

// Performance middleware
app.use(compression())

// Logging
app.use(morgan('combined'))

// Body parsing
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true, limit: '10mb' }))

// Rate limiting
app.use(rateLimiter)

// Routes
app.use('/api/v1', routes)

// Error handling
app.use(notFoundHandler)
app.use(errorHandler)

export default app
```

### Route Organization
```typescript
// src/routes/index.ts
import { Router } from 'express'
import authRoutes from './auth'
import userRoutes from './users'
import { authenticateToken } from '../middleware/auth'

const router = Router()

// Public routes
router.use('/auth', authRoutes)

// Protected routes
router.use('/users', authenticateToken, userRoutes)

// Health check
router.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  })
})

export default router
```

### Controller Pattern
```typescript
// src/controllers/user.controller.ts
import { Request, Response, NextFunction } from 'express'
import { userService } from '../services/user.service'
import { createUserSchema, updateUserSchema } from '../schemas/user.schema'
import { AppError } from '../utils/app-error'
import { asyncHandler } from '../utils/async-handler'

export const userController = {
  // Get all users with pagination
  getUsers: asyncHandler(async (req: Request, res: Response) => {
    const { page = 1, limit = 10, search } = req.query
    
    const result = await userService.getUsers({
      page: Number(page),
      limit: Number(limit),
      search: search as string
    })
    
    res.json({
      success: true,
      data: result.users,
      pagination: {
        page: result.page,
        limit: result.limit,
        total: result.total,
        totalPages: result.totalPages
      }
    })
  }),

  // Get user by ID
  getUserById: asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params
    
    const user = await userService.getUserById(id)
    if (!user) {
      throw new AppError('User not found', 404)
    }
    
    res.json({
      success: true,
      data: user
    })
  }),

  // Create new user
  createUser: asyncHandler(async (req: Request, res: Response) => {
    const validatedData = createUserSchema.parse(req.body)
    
    const user = await userService.createUser(validatedData)
    
    res.status(201).json({
      success: true,
      data: user,
      message: 'User created successfully'
    })
  }),

  // Update user
  updateUser: asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params
    const validatedData = updateUserSchema.parse(req.body)
    
    const user = await userService.updateUser(id, validatedData)
    
    res.json({
      success: true,
      data: user,
      message: 'User updated successfully'
    })
  }),

  // Delete user
  deleteUser: asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params
    
    await userService.deleteUser(id)
    
    res.status(204).send()
  })
}
```

## Prisma ORM Best Practices

### Schema Design
```prisma
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isActive  Boolean  @default(true)
  role      Role     @default(USER)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts     Post[]
  comments  Comment[]
  sessions  Session[]
  
  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  slug        String   @unique
  published   Boolean  @default(false)
  publishedAt DateTime?
  
  // Foreign keys
  authorId    String
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  tags        Tag[]     @relation("PostTags")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  content String
  
  // Foreign keys
  postId  String
  userId  String
  
  // Relations
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostTags")
  
  @@map("tags")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("sessions")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
```

### Service Layer with Prisma
```typescript
// src/services/user.service.ts
import { PrismaClient, User, Prisma } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { AppError } from '../utils/app-error'
import { env } from '../config/env'

const prisma = new PrismaClient()

export type CreateUserData = {
  email: string
  username: string
  password: string
  firstName?: string
  lastName?: string
}

export type UpdateUserData = {
  username?: string
  firstName?: string
  lastName?: string
  avatar?: string
}

export type UserFilters = {
  page: number
  limit: number
  search?: string
  role?: string
  isActive?: boolean
}

export const userService = {
  // Get users with pagination and filtering
  async getUsers(filters: UserFilters) {
    const { page, limit, search, role, isActive } = filters
    const skip = (page - 1) * limit
    
    const where: Prisma.UserWhereInput = {
      ...(search && {
        OR: [
          { email: { contains: search, mode: 'insensitive' } },
          { username: { contains: search, mode: 'insensitive' } },
          { firstName: { contains: search, mode: 'insensitive' } },
          { lastName: { contains: search, mode: 'insensitive' } }
        ]
      }),
      ...(role && { role: role as any }),
      ...(isActive !== undefined && { isActive })
    }
    
    const [users, total] = await prisma.$transaction([
      prisma.user.findMany({
        where,
        skip,
        take: limit,
        select: {
          id: true,
          email: true,
          username: true,
          firstName: true,
          lastName: true,
          avatar: true,
          isActive: true,
          role: true,
          createdAt: true,
          updatedAt: true,
          _count: {
            select: {
              posts: true,
              comments: true
            }
          }
        },
        orderBy: { createdAt: 'desc' }
      }),
      prisma.user.count({ where })
    ])
    
    return {
      users,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    }
  },

  // Get user by ID
  async getUserById(id: string) {
    const user = await prisma.user.findUnique({
      where: { id },
      select: {
        id: true,
        email: true,
        username: true,
        firstName: true,
        lastName: true,
        avatar: true,
        isActive: true,
        role: true,
        createdAt: true,
        updatedAt: true,
        _count: {
          select: {
            posts: true,
            comments: true
          }
        }
      }
    })
    
    return user
  },

  // Get user by email
  async getUserByEmail(email: string) {
    return prisma.user.findUnique({
      where: { email }
    })
  },

  // Create new user
  async createUser(data: CreateUserData) {
    // Check if user exists
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email: data.email },
          { username: data.username }
        ]
      }
    })
    
    if (existingUser) {
      throw new AppError('User with this email or username already exists', 409)
    }
    
    // Hash password
    const hashedPassword = await bcrypt.hash(data.password, env.BCRYPT_ROUNDS)
    
    // Create user
    const user = await prisma.user.create({
      data: {
        ...data,
        password: hashedPassword
      },
      select: {
        id: true,
        email: true,
        username: true,
        firstName: true,
        lastName: true,
        avatar: true,
        isActive: true,
        role: true,
        createdAt: true
      }
    })
    
    return user
  },

  // Update user
  async updateUser(id: string, data: UpdateUserData) {
    // Check if user exists
    const existingUser = await prisma.user.findUnique({
      where: { id }
    })
    
    if (!existingUser) {
      throw new AppError('User not found', 404)
    }
    
    // Check username uniqueness if updating
    if (data.username && data.username !== existingUser.username) {
      const usernameExists = await prisma.user.findUnique({
        where: { username: data.username }
      })
      
      if (usernameExists) {
        throw new AppError('Username already taken', 409)
      }
    }
    
    // Update user
    const user = await prisma.user.update({
      where: { id },
      data,
      select: {
        id: true,
        email: true,
        username: true,
        firstName: true,
        lastName: true,
        avatar: true,
        isActive: true,
        role: true,
        updatedAt: true
      }
    })
    
    return user
  },

  // Delete user
  async deleteUser(id: string) {
    const user = await prisma.user.findUnique({
      where: { id }
    })
    
    if (!user) {
      throw new AppError('User not found', 404)
    }
    
    await prisma.user.delete({
      where: { id }
    })
  },

  // Verify password
  async verifyPassword(password: string, hashedPassword: string) {
    return bcrypt.compare(password, hashedPassword)
  }
}
```

## PostgreSQL Optimization

### Database Configuration
```sql
-- migrations/001_initial_setup.sql
-- Performance optimizations
ALTER SYSTEM SET shared_buffers = '256MB';
ALTER SYSTEM SET effective_cache_size = '1GB';
ALTER SYSTEM SET maintenance_work_mem = '64MB';
ALTER SYSTEM SET wal_buffers = '16MB';
ALTER SYSTEM SET checkpoint_completion_target = 0.7;
ALTER SYSTEM SET max_wal_size = '1GB';
ALTER SYSTEM SET min_wal_size = '80MB';

-- Connection pooling
ALTER SYSTEM SET max_connections = '200';

-- Query optimization
ALTER SYSTEM SET random_page_cost = 1.1;
ALTER SYSTEM SET effective_io_concurrency = 200;

SELECT pg_reload_conf();
```

### Indexing Strategy
```sql
-- Essential indexes for performance
CREATE INDEX CONCURRENTLY idx_users_email ON users(email);
CREATE INDEX CONCURRENTLY idx_users_username ON users(username);
CREATE INDEX CONCURRENTLY idx_users_active ON users(is_active);
CREATE INDEX CONCURRENTLY idx_users_created_at ON users(created_at);

CREATE INDEX CONCURRENTLY idx_posts_author_id ON posts(author_id);
CREATE INDEX CONCURRENTLY idx_posts_published ON posts(published);
CREATE INDEX CONCURRENTLY idx_posts_slug ON posts(slug);
CREATE INDEX CONCURRENTLY idx_posts_published_at ON posts(published_at);

CREATE INDEX CONCURRENTLY idx_comments_post_id ON comments(post_id);
CREATE INDEX CONCURRENTLY idx_comments_user_id ON comments(user_id);

-- Composite indexes for common queries
CREATE INDEX CONCURRENTLY idx_posts_author_published ON posts(author_id, published);
CREATE INDEX CONCURRENTLY idx_users_active_role ON users(is_active, role);
```

## Validation & Security

### Zod Schemas
```typescript
// src/schemas/user.schema.ts
import { z } from 'zod'

export const createUserSchema = z.object({
  email: z.string().email('Invalid email format'),
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(20, 'Username must be at most 20 characters')
    .regex(/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase, one uppercase, and one number'),
  firstName: z.string().min(1, 'First name is required').optional(),
  lastName: z.string().min(1, 'Last name is required').optional()
})

export const updateUserSchema = z.object({
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(20, 'Username must be at most 20 characters')
    .regex(/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores')
    .optional(),
  firstName: z.string().min(1, 'First name is required').optional(),
  lastName: z.string().min(1, 'Last name is required').optional(),
  avatar: z.string().url('Invalid avatar URL').optional()
})

export const loginSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(1, 'Password is required')
})

// Request parameter schemas
export const getUserParamsSchema = z.object({
  id: z.string().cuid('Invalid user ID format')
})

export const getUsersQuerySchema = z.object({
  page: z.string().transform(Number).refine(n => n > 0, 'Page must be positive').optional(),
  limit: z.string().transform(Number).refine(n => n > 0 && n <= 100, 'Limit must be between 1 and 100').optional(),
  search: z.string().optional(),
  role: z.enum(['USER', 'ADMIN', 'MODERATOR']).optional(),
  isActive: z.string().transform(s => s === 'true').optional()
})
```

### Authentication Middleware
```typescript
// src/middleware/auth.ts
import { Request, Response, NextFunction } from 'express'
import jwt from 'jsonwebtoken'
import { PrismaClient } from '@prisma/client'
import { AppError } from '../utils/app-error'
import { env } from '../config/env'

const prisma = new PrismaClient()

interface JwtPayload {
  userId: string
  email: string
  role: string
}

declare global {
  namespace Express {
    interface Request {
      user?: {
        id: string
        email: string
        role: string
      }
    }
  }
}

export const authenticateToken = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization
    const token = authHeader && authHeader.split(' ')[1]
    
    if (!token) {
      throw new AppError('Access token required', 401)
    }
    
    const decoded = jwt.verify(token, env.JWT_SECRET) as JwtPayload
    
    // Check if user still exists
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: { id: true, email: true, role: true, isActive: true }
    })
    
    if (!user || !user.isActive) {
      throw new AppError('User not found or inactive', 401)
    }
    
    req.user = user
    next()
  } catch (error) {
    if (error instanceof jwt.JsonWebTokenError) {
      next(new AppError('Invalid token', 401))
    } else {
      next(error)
    }
  }
}

export const requireRole = (...roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      return next(new AppError('Authentication required', 401))
    }
    
    if (!roles.includes(req.user.role)) {
      return next(new AppError('Insufficient permissions', 403))
    }
    
    next()
  }
}
```

## Error Handling

### Custom Error Classes
```typescript
// src/utils/app-error.ts
export class AppError extends Error {
  public readonly statusCode: number
  public readonly isOperational: boolean

  constructor(message: string, statusCode: number = 500) {
    super(message)
    
    this.statusCode = statusCode
    this.isOperational = true
    
    Error.captureStackTrace(this, this.constructor)
  }
}

export class ValidationError extends AppError {
  constructor(message: string) {
    super(message, 400)
  }
}

export class NotFoundError extends AppError {
  constructor(resource: string = 'Resource') {
    super(`${resource} not found`, 404)
  }
}

export class UnauthorizedError extends AppError {
  constructor(message: string = 'Unauthorized') {
    super(message, 401)
  }
}

export class ForbiddenError extends AppError {
  constructor(message: string = 'Forbidden') {
    super(message, 403)
  }
}
```

### Error Handler Middleware
```typescript
// src/middleware/error-handler.ts
import { Request, Response, NextFunction } from 'express'
import { ZodError } from 'zod'
import { AppError } from '../utils/app-error'
import { env } from '../config/env'

export const errorHandler = (
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  // Default error
  let error = {
    statusCode: 500,
    message: 'Internal server error'
  }
  
  // Zod validation errors
  if (err instanceof ZodError) {
    error.statusCode = 400
    error.message = err.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', ')
  }
  
  // Custom app errors
  if (err instanceof AppError) {
    error.statusCode = err.statusCode
    error.message = err.message
  }
  
  // Prisma errors
  if (err.name === 'PrismaClientKnownRequestError') {
    error.statusCode = 400
    error.message = 'Database operation failed'
  }
  
  // Log error in development
  if (env.NODE_ENV === 'development') {
    console.error('Error:', err)
  }
  
  res.status(error.statusCode).json({
    success: false,
    error: {
      message: error.message,
      ...(env.NODE_ENV === 'development' && { stack: err.stack })
    }
  })
}
```

## Testing Strategy

### Test Setup
```typescript
// src/test/setup.ts
import { beforeAll, afterAll, beforeEach, afterEach } from 'vitest'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

beforeAll(async () => {
  // Reset database
  await prisma.$executeRaw`TRUNCATE TABLE "users", "posts", "comments", "sessions" RESTART IDENTITY CASCADE`
})

afterAll(async () => {
  await prisma.$disconnect()
})

beforeEach(async () => {
  // Clean up before each test
  await prisma.session.deleteMany()
  await prisma.comment.deleteMany()
  await prisma.post.deleteMany()
  await prisma.user.deleteMany()
})

export { prisma }
```

### API Testing
```typescript
// src/test/user.test.ts
import { describe, it, expect, beforeEach } from 'vitest'
import request from 'supertest'
import app from '../app'
import { prisma } from './setup'

describe('User API', () => {
  let authToken: string
  let userId: string
  
  beforeEach(async () => {
    // Create test user
    const response = await request(app)
      .post('/api/v1/auth/register')
      .send({
        email: 'test@example.com',
        username: 'testuser',
        password: 'Test123!',
        firstName: 'Test',
        lastName: 'User'
      })
    
    authToken = response.body.data.token
    userId = response.body.data.user.id
  })
  
  describe('GET /api/v1/users', () => {
    it('should return paginated users', async () => {
      const response = await request(app)
        .get('/api/v1/users')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200)
      
      expect(response.body.success).toBe(true)
      expect(response.body.data).toBeInstanceOf(Array)
      expect(response.body.pagination).toBeDefined()
    })
    
    it('should filter users by search term', async () => {
      await request(app)
        .post('/api/v1/auth/register')
        .send({
          email: 'jane@example.com',
          username: 'jane',
          password: 'Test123!',
          firstName: 'Jane',
          lastName: 'Doe'
        })
      
      const response = await request(app)
        .get('/api/v1/users?search=jane')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200)
      
      expect(response.body.data).toHaveLength(1)
      expect(response.body.data[0].firstName).toBe('Jane')
    })
  })
  
  describe('GET /api/v1/users/:id', () => {
    it('should return user by ID', async () => {
      const response = await request(app)
        .get(`/api/v1/users/${userId}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200)
      
      expect(response.body.success).toBe(true)
      expect(response.body.data.id).toBe(userId)
    })
    
    it('should return 404 for non-existent user', async () => {
      await request(app)
        .get('/api/v1/users/non-existent-id')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(404)
    })
  })
})
```

## Performance & Monitoring

### Database Connection Pooling
```typescript
// src/config/database.ts
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
})

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

### Request Logging
```typescript
// src/middleware/request-logger.ts
import { Request, Response, NextFunction } from 'express'

export const requestLogger = (req: Request, res: Response, next: NextFunction) => {
  const startTime = Date.now()
  
  res.on('finish', () => {
    const duration = Date.now() - startTime
    console.log(`${req.method} ${req.url} - ${res.statusCode} - ${duration}ms`)
  })
  
  next()
}
```

## Deployment Best Practices

### Docker Configuration
```dockerfile
# Dockerfile
FROM oven/bun:1 AS base
WORKDIR /app

# Install dependencies
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile

# Copy source code
COPY . .

# Generate Prisma client
RUN bunx prisma generate

# Build application
RUN bun run build

# Production image
FROM oven/bun:1-slim AS production
WORKDIR /app

COPY --from=base /app/dist ./dist
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/package.json ./

EXPOSE 3000

CMD ["bun", "run", "start"]
```

This comprehensive backend guide provides enterprise-level patterns for building robust APIs with Express.js, Prisma, Bun, and PostgreSQL.
description:
globs:
alwaysApply: false
---
